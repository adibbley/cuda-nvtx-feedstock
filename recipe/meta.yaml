{% set name = "cuda-nvtx" %}
{% set version = "12.5.39" %}
{% set cuda_version = "12.5" %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-ppc64le" %}  # [ppc64le]
{% set platform = "linux-sbsa" %}  # [aarch64]
{% set platform = "windows-x86_64" %}  # [win]
{% set target_name = "x86_64-linux" %}  # [linux64]
{% set target_name = "ppc64le-linux" %}  # [ppc64le]
{% set target_name = "sbsa-linux" %}  # [aarch64]
{% set target_name = "x64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}  # [win]

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cuda/redist/cuda_nvtx/{{ platform }}/cuda_nvtx-{{ platform }}-{{ version }}-archive.{{ extension }}
  sha256: c2cd53ef7b3351e7068b4584910239f8d0a7f677078112fe2abc0d0eda2c9314  # [linux64]
  sha256: ed75919953354db617da04a030c3b49cb17df372e4c794358b1a6e88c57c7737  # [aarch64]
  sha256: 7bf6dd414c982f75d4dcb8f184cd65b0e2d48c356b4a999d79faf75f30ff0bc7  # [win]

build:
  number: 0
  skip: true  # [osx or ppc64le]
  binary_relocation: false

test:
  requires:
    - patchelf  # [linux]
  files:
    - test-rpath.sh
  commands:
    - test -L $PREFIX/lib/libnvToolsExt.so.1                                # [linux]
    - test -L $PREFIX/lib/libnvToolsExt.so.1.0.0                            # [linux]
    - test -L $PREFIX/targets/{{ target_name }}/lib/libnvToolsExt.so.1      # [linux]
    - test -f $PREFIX/targets/{{ target_name }}/lib/libnvToolsExt.so.1.0.0  # [linux]
    - bash test-rpath.sh                                                    # [linux]

outputs:
  - name: cuda-nvtx
    build:
        skip: true  # [not linux]
    files:
      - lib/libnv*.so.*                       # [linux]
      - targets/{{ target_name }}/lib/*.so.*  # [linux]
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ stdlib("c") }}  # [linux]
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - patchelf <0.18.0  # [linux]
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
    # Tests are defined at the top level, due to package/output name conflicts.
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: A C-based API for annotating events, code ranges, and resources
      description: |
        A C-based API for annotating events, code ranges, and resources in your
        applications. Applications which integrate NVTX can use the Visual Profiler
        to capture and visualize these events and ranges.
      doc_url: https://docs.nvidia.com/nvtx/

  - name: cuda-nvtx-dev
    build:
      run_exports:                                        # [linux]
        - {{ pin_subpackage("cuda-nvtx", max_pin='x') }}  # [linux]
    files:
      - lib/libnv*.so                                    # [linux]
      - lib/pkgconfig                                    # [linux]
      - targets/{{ target_name }}/lib/*.so               # [linux]
      - targets/{{ target_name }}/include/nvToolsExt*.h  # [linux]
      - targets/{{ target_name }}/include/nvtx3          # [linux]
      - Library\include\targets\{{ target_name }}        # [win]
    requirements:
      build:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - {{ pin_subpackage("cuda-nvtx", exact=True) }}  # [linux]
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
    test:
      commands:
        - test -L $PREFIX/lib/libnvToolsExt.so                                                      # [linux]
        - test -f $PREFIX/lib/pkgconfig/nvToolsExt*.pc                                              # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/nvToolsExtCuda.h                        # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/nvtx3/nvToolsExtCuda.h                  # [linux]
        - test -L $PREFIX/targets/{{ target_name }}/lib/libnvToolsExt.so                            # [linux]
        - if not exist %LIBRARY_INC%\targets\{{ target_name }}\nvtx3\nvToolsExt.h exit 1  # [win]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: A C-based API for annotating events, code ranges, and resources
      description: |
        A C-based API for annotating events, code ranges, and resources in your
        applications. Applications which integrate NVTX can use the Visual Profiler
        to capture and visualize these events and ranges.
      doc_url: https://docs.nvidia.com/nvtx/

about:
  home: https://developer.nvidia.com/cuda-toolkit
  license_file: LICENSE
  license: LicenseRef-NVIDIA-End-User-License-Agreement
  license_url: https://docs.nvidia.com/cuda/eula/index.html
  summary: A C-based API for annotating events, code ranges, and resources
  description: |
    A C-based API for annotating events, code ranges, and resources in your
    applications. Applications which integrate NVTX can use the Visual Profiler
    to capture and visualize these events and ranges.
  doc_url: https://docs.nvidia.com/nvtx/

extra:
  recipe-maintainers:
    - conda-forge/cuda
